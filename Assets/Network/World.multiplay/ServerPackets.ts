//
//  __  __ _____ _____  _    ____  ____   _    ____ _____ 
// |  \/  | ____|_   _|/ \  / ___||  _ \ / \  / ___| ____|
// | |\/| |  _|   | | / _ \ \___ \| |_) / _ \| |   |  _|  
// | |  | | |___  | |/ ___ \ ___) |  __/ ___ \ |___| |___ 
// |_|  |_|_____| |_/_/   \_\____/|_| /_/   \_\____|_____|
//
// Packet definitions and utilities for the server.
// AUTO-GENERATED: This file is generated by the packet-gen 1.6.3.
// AUTO-GENERATED: DO NOT EDIT THIS FILE. All changes are removed when the files are re-generated.
//
// @ts-ignore
import { Vector3 as Quaternion, Vector3 } from "ZEPETO.Multiplay.Schema";
export namespace server {
	export namespace gesture {
		export enum MessageType {
			PlayGesture = "gesture__play_gesture",
			StopGesture = "gesture__stop_gesture",
		}
		export interface PlayGesture {
			sessionId: string;
			gesture: number;
		}
		export function encodePlayGesture(packet: PlayGesture): string {
			return `${(packet.sessionId ? packet.sessionId.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}/${String(packet.gesture)}`;
		}
		export interface StopGesture {
			sessionId: string;
		}
		export function encodeStopGesture(packet: StopGesture): string {
			return `${(packet.sessionId ? packet.sessionId.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}`;
		}
	}
	export namespace seat {
		export enum MessageType {
			Seat = "seat__seat",
			Unseat = "seat__unseat",
		}
		export interface Seat {
			animation: string;
			userSessionId: string;
		}
		export function encodeSeat(packet: Seat): string {
			return `${(packet.animation ? packet.animation.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}/${(packet.userSessionId ? packet.userSessionId.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}`;
		}
		export interface Unseat {
			userSessionId: string;
		}
		export function encodeUnseat(packet: Unseat): string {
			return `${(packet.userSessionId ? packet.userSessionId.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}`;
		}
	}
	export namespace sync {
		export enum MessageType {
			SyncCharacterState = "sync__sync_character_state",
			SyncCharacterTeleport = "sync__sync_character_teleport",
			SyncTime = "sync__sync_time",
			SyncTimeDiff = "sync__sync_time_diff",
		}
		export interface SyncCharacterState {
			sessionId: string;
			state: number;
			extraState: number;
			position: Vector3;
			rotation: Quaternion;
			velocity: Vector3;
		}
		export function encodeSyncCharacterState(packet: SyncCharacterState): string {
			return `${(packet.sessionId ? packet.sessionId.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}//${String(packet.state)}//${String(packet.extraState)}//${String(Math.floor((packet.position.x) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.position.y) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.position.z) * 10 ** 3) / 10 ** 3)}//${String(Math.floor((packet.rotation.x) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.rotation.y) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.rotation.z) * 10 ** 3) / 10 ** 3)}//${String(Math.floor((packet.velocity.x) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.velocity.y) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.velocity.z) * 10 ** 3) / 10 ** 3)}`;
		}
		export interface SyncCharacterTeleport {
			sessionId: string;
			position: Vector3;
			rotation: Quaternion;
		}
		export function encodeSyncCharacterTeleport(packet: SyncCharacterTeleport): string {
			return `${(packet.sessionId ? packet.sessionId.replace(/@/g, "@@").replace(/!/g, "!!").replace(/\$/g, "$$").replace(/\//g, "@$@") : "@")}//${String(Math.floor((packet.position.x) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.position.y) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.position.z) * 10 ** 3) / 10 ** 3)}//${String(Math.floor((packet.rotation.x) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.rotation.y) * 10 ** 3) / 10 ** 3)}/${String(Math.floor((packet.rotation.z) * 10 ** 3) / 10 ** 3)}`;
		}
		export interface SyncTime {
		}
		export function encodeSyncTime(packet: SyncTime): string {
			return ``;
		}
		export interface SyncTimeDiff {
			offset: number;
			roundTripDelay: number;
		}
		export function encodeSyncTimeDiff(packet: SyncTimeDiff): string {
			return `${String(packet.offset)}/${String(packet.roundTripDelay)}`;
		}
	}
}
export namespace client {
	export namespace gesture {
		export enum MessageType {
			PlayGesture = "gesture__play_gesture",
			StopGesture = "gesture__stop_gesture",
		}
		export interface PlayGesture {
			gesture: number;
		}
		export function decodePlayGesture(packet: string): PlayGesture {
			const [_0] = packet.split("/");
			const __0 = Number(_0);
			return { gesture: __0 };
		}
		export interface StopGesture {
		}
		export function decodeStopGesture(packet: string): StopGesture {
			const [] = packet.split("/");
			return {  };
		}
	}
	export namespace seat {
		export enum MessageType {
			Seat = "seat__seat",
			Unseat = "seat__unseat",
		}
		export interface Seat {
			animation: string;
		}
		export function decodeSeat(packet: string): Seat {
			const [_0] = packet.split("/");
			const __0 = (_0 === "@" ? "" : _0.replace(/@\$@/g, "/").replace(/\$\$/g, "$").replace(/!!/g, "!").replace(/@@/g, "@"));
			return { animation: __0 };
		}
		export interface Unseat {
		}
		export function decodeUnseat(packet: string): Unseat {
			const [] = packet.split("/");
			return {  };
		}
	}
	export namespace sync {
		export enum MessageType {
			SyncCharacterState = "sync__sync_character_state",
			SyncCharacterTeleport = "sync__sync_character_teleport",
			SyncTime = "sync__sync_time",
		}
		export interface SyncCharacterState {
			state: number;
			extraState: number;
			position: Vector3;
			rotation: Quaternion;
			velocity: Vector3;
		}
		export function decodeSyncCharacterState(packet: string): SyncCharacterState {
			const [_0, _1, _2, _3, _4] = packet.split("//");
			const [_5, _6, _7] = _2.split("/");
			const [_8, _9, _10] = _3.split("/");
			const [_11, _12, _13] = _4.split("/");
			const __11 = Number(_11);
			const __12 = Number(_12);
			const __13 = Number(_13);
			const __8 = Number(_8);
			const __9 = Number(_9);
			const __10 = Number(_10);
			const __5 = Number(_5);
			const __6 = Number(_6);
			const __7 = Number(_7);
			const __0 = Number(_0);
			const __1 = Number(_1);
			const __2 = (() => { const $ = new Vector3(); $.x = __5; $.y = __6; $.z = __7; return $; })();
			const __3 = (() => { const $ = new Quaternion(); $.x = __8; $.y = __9; $.z = __10; return $; })();
			const __4 = (() => { const $ = new Vector3(); $.x = __11; $.y = __12; $.z = __13; return $; })();
			return { state: __0, extraState: __1, position: __2, rotation: __3, velocity: __4 };
		}
		export interface SyncCharacterTeleport {
			position: Vector3;
			rotation: Quaternion;
		}
		export function decodeSyncCharacterTeleport(packet: string): SyncCharacterTeleport {
			const [_0, _1] = packet.split("//");
			const [_2, _3, _4] = _0.split("/");
			const [_5, _6, _7] = _1.split("/");
			const __5 = Number(_5);
			const __6 = Number(_6);
			const __7 = Number(_7);
			const __2 = Number(_2);
			const __3 = Number(_3);
			const __4 = Number(_4);
			const __0 = (() => { const $ = new Vector3(); $.x = __2; $.y = __3; $.z = __4; return $; })();
			const __1 = (() => { const $ = new Quaternion(); $.x = __5; $.y = __6; $.z = __7; return $; })();
			return { position: __0, rotation: __1 };
		}
		export interface SyncTime {
			t1: number;
			t2: number;
		}
		export function decodeSyncTime(packet: string): SyncTime {
			const [_0, _1] = packet.split("/");
			const __0 = Number(_0);
			const __1 = Number(_1);
			return { t1: __0, t2: __1 };
		}
	}
}
